#pragma once
#include <cstdint>
#include <Windows.h>


namespace dolboeb {
	class i_exploit {
	public:
		//
		// Get drv name, "phymem" for example
		virtual const char* get_name( ) = 0;
		//
		// Reads physical memory
		virtual bool read_phys( const uint64_t phys_addr, uint8_t* buffer, const uint64_t size ) = 0;
		//
		// Writes to physical memory
		virtual bool write_phys( const uint64_t phys_addr, uint8_t* buffer, const uint64_t size ) = 0;
		//
		// Sends IoCtlCode that will execute our patched function
		virtual bool send_callback_request( void* shell_executor_addr ) = 0;
		//
		// Setting up driver, like dropping it from resources and loading
		virtual bool setup_driver( ) = 0;
		//
		// Initing device handle ( m_device_handle )
		virtual bool init_device_handle( ) = 0;
		//
		// Unloads loaded driver
		virtual bool unload_driver( ) = 0;
		//
		// Returns the static rva to function that we'll patch to our shellcode
		virtual uint64_t target_function_rva( ) = 0;

	public:
		//
		// Some getters / setters
		__forceinline HANDLE get_device_handle( ) { return m_device_handle; }
		__forceinline uint64_t get_directory_base( ) { return m_directory_base; }
		__forceinline void set_directory_base( uint64_t base ) { m_directory_base = base; }
		__forceinline void set_device_handle( HANDLE handle ) { m_device_handle = handle; }

	private:
		HANDLE m_device_handle;
		uint64_t m_directory_base;
	};
}
